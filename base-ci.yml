stages:
  - docker
  - build
  - test
  - coverage
  - release

## Docker stage ##################################################################
.docker:
  stage: docker
  image: $CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/docker
  services:
    - $CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/docker:dind
  tags:
    - dind
    - privileged
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $TAG || true
    - docker build --pull --cache-from $TAG --tag $TAG --file .gitlab-ci/$DOCKERFILE .gitlab-ci
    - docker push $TAG

docker:debian:
  extends: .docker
  variables:
    TAG: "$CI_REGISTRY_IMAGE:debian"
    DOCKERFILE: "Dockerfile-debian"

docker:alpine:
  extends: .docker
  variables:
    TAG: "$CI_REGISTRY_IMAGE:alpine"
    DOCKERFILE: "Dockerfile-alpine"

## Build stage ###################################################################
.build:
  stage: build
  script:
    - meson setup build
    - meson compile -C build
  artifacts:
    when: on_failure
    expire_in: 1 week
    paths:
    - 'build/meson-logs/'

build:debian:
  extends: .build
  image: "$CI_REGISTRY_IMAGE:debian"
  needs: ["docker:debian"]

build:alpine:
  extends: .build
  image: "$CI_REGISTRY_IMAGE:alpine"
  needs: ["docker:alpine"]

dist:
  stage: build
  image: "$CI_REGISTRY_IMAGE:debian"
  needs: ["docker:debian"]
  script:
    - meson setup build
    - meson dist -C build --formats xztar,gztar,zip
    - mv build/meson-dist/* ./
  artifacts:
    expire_in: 1 month
    paths:
      - $NAME-*.tar.gz
      - $NAME-*.tar.xz
      - $NAME-*.zip

## Test stage ####################################################################
.test:
  stage: test
  before_script:
    - meson setup build
  script:
    - meson test -C build
  artifacts:
    when: on_failure
    expire_in: 1 week
    paths:
      - 'build/meson-logs/'
    reports:
      junit: 'build/meson-logs/testlog.junit.xml'

test:debian:
  extends: .test
  image: "$CI_REGISTRY_IMAGE:debian"
  needs: ["build:debian"]

test:alpine:
  extends: .test
  image: "$CI_REGISTRY_IMAGE:alpine"
  needs: ["build:alpine"]

.valgrind:memcheck:
  extends: .test
  variables:
    VALGRIND: memcheck

valgrind:memcheck:debian:
  extends: .valgrind:memcheck
  image: "$CI_REGISTRY_IMAGE:debian"
  needs: ["build:debian"]

valgrind:memcheck:alpine:
  extends: .valgrind:memcheck
  image: "$CI_REGISTRY_IMAGE:alpine"
  needs: ["build:alpine"]

valgrind:helgrind:debian:
  extends: .test
  variables:
    VALGRIND: helgrind
  image: "$CI_REGISTRY_IMAGE:debian"
  needs: ["build:debian"]
# Helgrind detects some issue in musl thus we skip it on musl

.valgrind:drd:
  extends: .test
  variables:
    VALGRIND: drd

valgrind:drd:debian:
  extends: .valgrind:drd
  image: "$CI_REGISTRY_IMAGE:debian"
  needs: ["build:debian"]

valgrind:drd:alpine:
  extends: .valgrind:drd
  image: "$CI_REGISTRY_IMAGE:alpine"
  needs: ["build:alpine"]

.linter:
  stage: test
  allow_failure: true
  image: "$CI_REGISTRY_IMAGE:debian"
  needs: ["docker:debian"]
  before_script:
    - meson setup build

cppcheck:
  extends: .linter
  script:
    - meson compile -C build cppcheck

flawfinder:
  extends: .linter
  script:
    - meson compile -C build flawfinder

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

## Code Coverage stage ###########################################################
coverage:
  stage: coverage
  needs: ["test:debian"]
  image: "$CI_REGISTRY_IMAGE:debian"
  script:
    - meson setup -Db_coverage=true build
    - meson test -C build
    - ninja -C build coverage-html
    - mv build/meson-logs/coveragereport ./
  coverage: '/lines\.\.\.\.\.\.: (\d+.\d+%)/'
  artifacts:
    expire_in: 1 month
    expose_as: 'Code Coverage'
    paths:
    - 'coveragereport/'

## Release creation ##############################################################
release:
  stage: release
  image: "registry.gitlab.com/gitlab-org/release-cli:latest"
  rules:
    - if: '$CI_COMMIT_TAG'
  needs:
    - job: dist
      artifacts: true
  before_script:
    - apk update
    - apk add bash curl
  script:
    - /release.sh "$PROJECT_NAME"
